# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: "livequery_models"
version: "1.0.0"
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: "livequery"

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analysis"]
test-paths: ["tests"]
seed-paths: ["data"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target" # directory which will store compiled SQL files
clean-targets: # directories to be removed by `dbt clean`
  - "target"
  - "dbt_modules"
  - "dbt_packages"

tests:
  +store_failures: true # all tests

on-run-start:
  - "{{ create_sps() }}"
  - "{{ create_udfs() }}"

on-run-end:
  - "{{ apply_meta_as_tags(results) }}"

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.

vars:
  "dbt_date:time_zone": GMT
  UPDATE_UDFS_AND_SPS: false
  UPDATE_SNOWFLAKE_TAGS: True
  STREAMLINE_INVOKE_STREAMS: False
  STREAMLINE_USE_DEV_FOR_EXTERNAL_TABLES: False
  REST_API_ID_PROD: hn8uqhku77
  REST_API_ID_DEV: hn8uqhku77
  API_INTEGRATION: AWS_LIVE_QUERY_DEV
  AWS_REGION: us-east-1
  UDFS:
    streamline.introspect:
      name: streamline.udf_introspect
      signature:
        - [echo, STRING]
      func_type: SECURE EXTERNAL
      return_type: TEXT
      api_integration: AWS_LIVE_QUERY_DEV
      sql: introspect

    beta.udf_register_secret:
      name: beta.udf_register_secret
      signature:
        - [request_id, string]
        - [key, string]
      func_type: SECURE
      return_type: TEXT
      options: NOT NULL STRICT IMMUTABLE
      sql: |
        SELECT
          STREAMLINE.UDF_REGISTER_SECRET(REQUEST_ID, STREAMLINE.UDF_WHOAMI(), KEY)

    beta.udf_api:
      name: beta.udf_api
      signature:
        - [method, STRING]
        - [url, STRING]
        - [headers, OBJECT]
        - [data, OBJECT]
        - [secret_name, STRING]
      return_type: VARIANT
      func_type: SECURE
      options: NOT NULL STRICT VOLATILE
      sql: |
        SELECT
          STREAMLINE.UDF_API(
              method,
              url,
              headers,
              data,
              STREAMLINE.UDF_WHOAMI(),
              secret_name
          )

    streamline.udf_api:
      name: streamline.udf_api
      signature:
        - [method, STRING]
        - [url, STRING]
        - [headers, OBJECT]
        - [DATA, OBJECT]
        - [user_id, STRING]
        - [SECRET, STRING]
      return_type: VARIANT
      func_type: SECURE EXTERNAL
      api_integration: AWS_LIVE_QUERY_DEV
      options: NOT NULL STRICT
      sql: udf_api

    streamline.udf_register_secret:
      name: streamline.udf_register_secret
      signature:
        - [request_id, string]
        - [user_id, string]
        - [key, string]
      return_type: TEXT
      func_type: SECURE EXTERNAL
      api_integration: AWS_LIVE_QUERY_DEV
      options: NOT NULL STRICT
      sql: secret/register

    streamline.whoami:
      name: streamline.udf_whoami
      signature: []
      func_type: SECURE
      return_type: TEXT
      options: NOT NULL STRICT IMMUTABLE MEMOIZABLE
      sql: |
        SELECT
          COALESCE(SPLIT_PART(GETVARIABLE('QUERY_TAG_SESSION'), ',',2), CURRENT_USER())
